{"name":"Nhibernate.aspnet.identity","tagline":"ASP.NET Identity providers that use NHibernate","body":"NHibernate.AspNet.Identity\r\n=======================\r\n\r\nASP.NET Identity provider that users NHibernate for storage\r\n\r\n## Purpose ##\r\n\r\nASP.NET MVC 5 shipped with a new Identity system (in the Microsoft.AspNet.Identity.Core package) in order to support both local login and remote logins via OpenID/OAuth, but only ships with an\r\nEntity Framework provider (Microsoft.AspNet.Identity.EntityFramework).\r\n\r\n## Features ##\r\n* Drop-in replacement ASP.NET Identity with NHibernate as the backing store.\r\n* Based on same schema requirede by EntityFramework for compatibility model\r\n* Contains the same IdentityUser class used by the EntityFramework provider in the MVC 5 project template.\r\n* Supports additional profile properties on your application's user model.\r\n* Provides UserStore<TUser> implementation that implements the same interfaces as the EntityFramework version:\r\n    * IUserStore<TUser>\r\n    * IUserLoginStore<TUser>\r\n    * IUserRoleStore<TUser>\r\n    * IUserClaimStore<TUser>\r\n    * IUserPasswordStore<TUser>\r\n    * IUserSecurityStampStore<TUser>\r\n\r\n## Instructions ##\r\nThese instructions assume you know how to set up NHibernate within an MVC application.\r\n\r\n1. Create a new ASP.NET MVC 5 project, choosing the Individual User Accounts authentication type.\r\n2. Remove the Entity Framework packages and replace with NHibernate Identity:\r\n\r\n```PowerShell\r\nUninstall-Package Microsoft.AspNet.Identity.EntityFramework\r\nUninstall-Package EntityFramework\r\nInstall-Package NHibernate.AspNet.Identity\r\n```\r\n    \r\n3. In ~/Models/IdentityModels.cs:\r\n    * Remove the namespace: Microsoft.AspNet.Identity.EntityFramework\r\n    * Add the namespace: NHibernate.AspNet.Identity\r\n\t* Remove the ApplicationDbContext class completely.\r\n4. In ~/Controllers/AccountController.cs\r\n    * Remove the namespace: Microsoft.AspNet.Identity.EntityFramework\r\n    * Add the relevant ISession implementation that will be used by default.  This could be from a DI implementation.\r\n\tNote: This isn't mandatory, if you are using a framework that will inject the dependency, you shouldn't need the parameterless constructor.\r\n\r\n5. Setup configuration code\r\n\r\nNHibernate\r\n```C#\r\n\r\n\t// this assumes you are using the default Identity model of \"ApplicationUser\"\r\n\tvar myEntities = new [] {\r\n\t\ttypeof(ApplicationUser)\r\n\t};\r\n\t\r\n    var configuration = new Configuration();\r\n    configuration.Configure(\"sqlite-nhibernate-config.xml\");\r\n    configuration.AddDeserializedMapping(MappingHelper.GetIdentityMappings(myEntities), null);\r\n\r\n    var factory = configuration.BuildSessionFactory();\r\n    var session = factory.OpenSession();\r\n\r\n    var userManager = new UserManager<ApplicationUser>(\r\n        new UserStore<ApplicationUser>(session);\r\n```\r\n\r\nFluentNHibernate\r\n```C#\r\n\t// this assumes you are using the default Identity model of \"ApplicationUser\"\r\n\tvar myEntities = new [] {\r\n\t\ttypeof(ApplicationUser)\r\n\t};\r\n\t\r\n\tvar configuration = Fluently.Configure()\r\n\t   .Database(/*.....*/)\r\n\t   .ExposeConfiguration(cfg => {\r\n\t       cfg.AddDeserializedMapping(MappingHelper.GetIdentityMappings(myEntities), null);\r\n\t\t});\r\n\t\r\n    var factory = configuration.BuildSessionFactory();\r\n    var session = factory.OpenSession();\r\n\r\n    var userManager = new UserManager<ApplicationUser>(\r\n        new UserStore<ApplicationUser>(session);\r\n\r\n```\r\n\r\n\r\n## Thanks To ##\r\n\r\nSpecial thanks to [David Boike](https://github.com/DavidBoike) whos [RavenDB AspNet Identity](https://github.com/ILMServices/RavenDB.AspNet.Identity) project gave me the base for jumpstarting the NHibernate provider","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}